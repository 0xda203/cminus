const { RegExpLexer } = require("jison/tests/setup");

const TOKENS = [ 
"ELSE",
"IF",
"INT",
"RETURN",
"VOID",
"WHILE",
"PLUS",
"MINUS",
"TIMES",
"OVER",
"ID",
"NUM",
"LT",
"LE",
"GT",
"GE",
"EQ",
"NE",
"SEMI",
"LPAREN",
"RPAREN",
"LBRACE",
"RBRACE",
"LBRACKET",
"RBRACKET",
"COMMA",
"SEMI",
"ASSIGN",
"ERROR",
];

const lexData = {
	macros: {
		digit: "[0-9]",
		letter: "[a-zA-Z]",
	  },
	  rules: [
		["\\/\\*[\\s\\S]*?\\*\\/|([^\\\\:]|^)\\/\\/.*$", "/* ignore comment */"],
		["if", "return 'IF';"],
		["else", "return 'ELSE';"],
		["int", "return 'INT';"],
		["void", "return 'VOID';"],
		["return", "return 'RETURN';"],
		["while", "return 'WHILE';"],
		["\\[", "return 'LBRACE';"],
		["\\]", "return 'RBRACE';"],
		["==", "return 'EQ';"],
		["=", "return 'ASSIGN';"],
		["<", "return 'LE';"],
		[">", "return 'GT';"],
		["<=", "return 'LE';"],
		[">=", "return 'GE';"],
		["!=", "return 'NE';"],
		["\\+", "return 'PLUS'"],
		["-", "return 'MINUS';"],
		["\\*", "return 'TIMES';"],
		["/", "return 'OVER';"],
		["\\(", "return 'LPAREN';"],
		["\\)", "return 'RPAREN';"],
		[";", "return 'SEMI';"],
		["{digit}+", "return 'NUM';"],
		["{letter}+", "return 'ID';"],
		["\n", "yylineno++;"],
		["\\s+", "/* skip whitespace */"],
		["\\{", "return 'LCURLY';"],
		["\\}", "return 'RCURLY';"],
		[",", "return 'COMMA';"],
		[".", "return 'ERROR';"],
	  ],
}

module.exports = {Lexer: new RegExpLexer(lexData), TOKENS};